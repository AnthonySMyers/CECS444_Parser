import java.util.LinkedList;

public class A6_GrammarRules {
	private LinkedList<Node[]> rules;
	private AllNodes nodes;
	
	public A6_GrammarRules(){
		Node[] rule106 = new Node[1];
		rule106[0] = nodes.angle1;
		Node[] rule107 = new Node[1];
		rule107[0] = nodes.angle2;
		Node[] rule108 = new Node[1];
		rule108[0] = nodes.plus;
		Node[] rule109 = new Node[1];
		rule109[0] = nodes.minus;
		Node[] rule110 = new Node[1];
		rule110[0] = nodes.aster;
		Node[] rule111 = new Node[1];
		rule111[0] = nodes.slash;
		Node[] rule112 = new Node[1];
		rule112[0] = nodes.caret;
		Node[] rule117 = new Node[1];
		rule117[0] = null;
		Node[] rule118 = new Node[2];
		rule118[0] = nodes.equal;
		rule118[1] = nodes.Varinit;
		Node[] rule119 = new Node[1];
		rule119[0] = nodes.ClassDefTail;
		Node[] rule120 = new Node[1];
		rule120[0] = null;
		Node[] rule121 = new Node[3];
		rule121[0] = nodes.Classmom;
		rule121[1] = nodes.Interfaces;
		rule121[2] = nodes.BBClassitems;
		Node[] rule122 = new Node[1];
		rule122[0] = null;
		Node[] rule123 = new Node[1];
		rule123[0] = nodes.KKint;
		Node[] rule124 = new Node[2];
		rule124[0] = nodes.Exprlist;
		rule124[1] = nodes.brace2;
		Node[] rule125 = new Node[1];
		rule125[0] = nodes.brace2;
		Node[] rule126 = new Node[1];
		rule126[0] = null;
		Node[] rule127 = new Node[2];
		rule127[0] = nodes.ClassgroupTail;
		rule127[1] = nodes.Classitems;
		Node[] rule128 = new Node[1];
		rule128[0] = nodes.Class_ctrl;
		Node[] rule129 = new Node[1];
		rule129[0] = nodes.VarlistTail;
		Node[] rule130 = new Node[2];
		rule130[0] = nodes.Mdheader;
		rule130[1] = nodes.Mddecls;
		Node[] rule131 = new Node[3];
		rule131[0] = nodes.VarlItem;
		rule131[1] = nodes.semi;
		rule131[2] = nodes.Varlist;
		Node[] rule132 = new Node[2];
		rule132[0] = nodes.Varspecs;
		rule132[1] = nodes.parens2;
		Node[] rule133 = new Node[1];
		rule133[0] = nodes.parens2;
		Node[] rule134 = new Node[1];
		rule134[0] = nodes.PPexprs;
		Node[] rule135 = new Node[2];
		rule135[0] = nodes.equal;
		rule135[1] = nodes.Expr;
		Node[] rule136 = new Node[1];
		rule136[0] = null;
		Node[] rule137 = new Node[1];
		rule137[0] = nodes.KKexpr;
		Node[] rule138 = new Node[2];
		rule138[0] = nodes.Exprlist;
		rule138[1] = nodes.parens2;
		Node[] rule139 = new Node[1];
		rule139[0] = nodes.parens2;
		Node[] rule140 = new Node[1];
		rule140[0] = nodes.Expr;
		Node[] rule141 = new Node[1];
		rule141[0] = null;
		Node[] rule142 = new Node[1];
		rule142[0] = null;
		Node[] rule143 = new Node[1];
		rule143[0] = nodes.KKexpr;
		Node[] rule144 = new Node[1];
		rule144[0] = nodes.PPexpr;
		rules.add(rule106);
		rules.add(rule107);
		rules.add(rule108);
		rules.add(rule109);
		rules.add(rule110);
		rules.add(rule111);
		rules.add(rule112);
		rules.add(rule117);
		rules.add(rule118);
		rules.add(rule119);
		rules.add(rule120);
		rules.add(rule121);
		rules.add(rule122);
		rules.add(rule123);
		rules.add(rule124);
		rules.add(rule125);
		rules.add(rule126);
		rules.add(rule127);
		rules.add(rule128);
		rules.add(rule129);
		rules.add(rule130);
		rules.add(rule131);
		rules.add(rule132);
		rules.add(rule133);
		rules.add(rule134);
		rules.add(rule135);
		rules.add(rule136);
		rules.add(rule137);
		rules.add(rule138);
		rules.add(rule139);
		rules.add(rule140);		
		rules.add(rule141);
		rules.add(rule142);
		rules.add(rule143);
		rules.add(rule144);
	}
}
